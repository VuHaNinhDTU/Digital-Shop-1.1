class BlockchainClient {
  async writeProductTrace(product) {
    // Ghi th√¥ng tin truy xu·∫•t s·∫£n ph·∫©m l√™n blockchain (mock)
    const txHash = '0x' + Math.random().toString(16).substr(2, 40);
    const traceData = {
      productId: product._id,
      productName: product.name,
      category: product.category,
      price: product.price,
      unit: product.unit,
      timestamp: new Date().toISOString(),
      action: 'PRODUCT_CREATED',
      blockchainHash: txHash
    };
    
    console.log(`üîó Ghi truy xu·∫•t s·∫£n ph·∫©m l√™n blockchain:`, traceData);
    
    return { 
      success: true, 
      txHash: txHash,
      traceData: traceData
    };
  }
  
  async getProductTrace(productId) {
    // L·∫•y th√¥ng tin truy xu·∫•t s·∫£n ph·∫©m t·ª´ blockchain (mock)
    const traceData = {
      productId: productId,
      trace: {
        productName: 'Mock Product Name',
        category: 'Mock Category',
        price: 100000,
        unit: 'kg',
        timestamp: new Date().toISOString(),
        action: 'PRODUCT_CREATED',
        blockchainHash: '0x' + Math.random().toString(16).substr(2, 40),
        supplyChain: [
          {
            step: 'S·∫£n xu·∫•t',
            location: 'N√¥ng tr·∫°i ABC',
            timestamp: new Date(Date.now() - 86400000).toISOString(),
            description: 'Thu ho·∫°ch s·∫£n ph·∫©m'
          },
          {
            step: 'Ch·∫ø bi·∫øn',
            location: 'Nh√† m√°y XYZ',
            timestamp: new Date(Date.now() - 43200000).toISOString(),
            description: 'ƒê√≥ng g√≥i v√† ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng'
          },
          {
            step: 'Ph√¢n ph·ªëi',
            location: 'Kho trung chuy·ªÉn',
            timestamp: new Date().toISOString(),
            description: 'S·∫µn s√†ng giao h√†ng'
          }
        ]
      }
    };
    
    return traceData;
  }
}

module.exports = new BlockchainClient(); 